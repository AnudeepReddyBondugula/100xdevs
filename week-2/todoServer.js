/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
var todos = []; // * Todos will be stored here
var counter = 0;


// *** MiddleWares
app.use(bodyParser.json());



// *** Request Routes

// ** GET REQUEST ROUTES
// * gets all todos
app.get('/todos', getAllTodosRequestHandler);

// * gets a specific todo based on ID
app.get('/todos/:id', getSpecificTodoByIDRequestHandler);


// ** POST REQUEST ROUTES
// * Create a new Todo item
app.post('/todos', addNewTodoRequestHandler);



// ** PUT REQUEST ROUTES
// * Update todo item by ID
app.put('/todos/:id', updateTodoByIDRequestHandler);



// ** DELETE REQUEST ROUTES
// * Delete a todo item by ID
app.delete('/todos/:id', deleteTodoByIDRequestHandler);


// ** undefined Routes
app.use((req, res) => {
    res.status(404).send('404 - Not Found');
  });


// *** Request Handlers
function getAllTodosRequestHandler(req, res) {
    res.send(todos);
}

function getSpecificTodoByIDRequestHandler(req, res){

    var todoObj = getTodoByID(req.params.id);
    
    if (todoObj == null){
        res.status(404).send("404 Not Found");
    }
    else{
        res.send(todoObj);
    }
}

function addNewTodoRequestHandler(req, res){
    todoObj = {
        ID : counter,
        title : req.body.title,
        description : req.body.description,
        completed : req.body.completed
    }
    counter += 1;
    todos.push(todoObj);
    res.status(201).send(String(todoObj.ID));
}

function updateTodoByIDRequestHandler(req, res){
    var todoObj = getTodoByID(req.params.id);
    if (todoObj == null){
        res.status(404).send("404 Not Found");
    }
    else{
        todoObj.title = req.body.title,
        todoObj.description = req.body.description
        res.send(String(todoObj.ID));
    }
}

function deleteTodoByIDRequestHandler(req, res){
    var exists = getTodoByID(req.params.id);
    
    if (exists != null){
        deleteTodoByID(req.params.id);
        res.send("Deleted todo: "+ String(req.params.id));
    }
    else{
        res.status(404).send("404 Not Found");
    }
}


// *** Helper Functions

function getTodoByID(ID){
    for(var i = 0; i < todos.length; i++){
        if (todos[i].ID == ID){
            return todos[i];
        }
    }

    return null; // * Todo Does not Exist!
}

function deleteTodoByID(ID){
    todos = todos.filter(item => item.ID != ID);
}



const port = 3000;
app.listen(port, ()=>{
    console.log("Listening on", port);
})


module.exports = app;
